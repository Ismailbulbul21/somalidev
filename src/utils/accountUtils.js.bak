/**
 * Get the account type of a user
 * @param {Object} user - The user object from useAuth()
 * @returns {String} The account type ('developer' or 'company') or 'developer' as default
 */
export const getUserAccountType = (user) => {
    if (!user) return null;

    // If account_type exists in user metadata, return it
    if (user.user_metadata?.account_type) {
        return user.user_metadata.account_type;
    }

    // Default to 'developer' if no account type is set
    return 'developer';
};

/**
 * Check if the user is a developer
 * @param {Object} user - The user object from useAuth()
 * @returns {Boolean} True if the user is a developer, false otherwise
 */
export const isDeveloper = (user) => {
    return getUserAccountType(user) === 'developer';
};

/**
 * Check if the user is a company
 * @param {Object} user - The user object from useAuth()
 * @returns {Boolean} True if the user is a company, false otherwise
 */
export const isCompany = (user) => {
    return getUserAccountType(user) === 'company';
};

/**
 * Check if the user has admin role from profile data
 * This is a local check based on profile data and should be used for UI rendering only
 * For secure operations, always use the server-side isAdmin() RPC function
 * 
 * @param {Object} profile - The user profile object
 * @returns {Boolean} True if the user has admin role, false otherwise
 */
export const hasAdminRole = (profile) => {
    if (!profile) return false;
    return profile.role === 'admin';
};

/**
 * Format a date as a friendly string
 * @param {Date|string} date - The date to format
 * @returns {String} Formatted date string
 */
export const formatDate = (date) => {
    if (!date) return '';

    const d = new Date(date);
    return d.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    });
};

/**
 * Format a time as a friendly string
 * @param {Date|string} date - The date to format
 * @returns {String} Formatted time string
 */
export const formatTime = (date) => {
    if (!date) return '';

    const d = new Date(date);
    return d.toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit'
    });
};

/**
 * Format a datetime as a friendly string
 * @param {Date|string} date - The date to format
 * @returns {String} Formatted datetime string
 */
export const formatDateTime = (date) => {
    if (!date) return '';

    return `${formatDate(date)} at ${formatTime(date)}`;
};

/**
 * Get display text for the account type
 * @param {String} accountType - The account type string
 * @returns {String} Human-readable account type label
 */
export const getAccountTypeLabel = (accountType) => {
    switch (accountType) {
        case 'developer':
            return 'Developer';
        case 'company':
            return 'Company';
        default:
            return 'User';
    }
}; 